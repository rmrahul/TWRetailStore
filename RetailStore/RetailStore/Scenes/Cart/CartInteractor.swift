//
//  CartInteractor.swift
//  RetailStore
//
//  Created by Rahul Mane on 21/07/18.
//  Copyright (c) 2018 developer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CartBusinessLogic{
    func fetchProducts(request: Cart.FetchProducts.Request)
    func removeFromCart(request: Cart.RemoveProduct.Request)
}

protocol CartDataStore{
    var products: [Product]? { get set }
}

class CartInteractor: CartBusinessLogic, CartDataStore{
    var products: [Product]?
    var presenter: CartPresentationLogic?
    var worker: CartWorker = CartWorker(cartStore: CartCoreDataStore())
    
    // MARK: CartBusinessLogic implementation
    func fetchProducts(request: Cart.FetchProducts.Request){
        worker.fetchAll(completionHandler: { (result) in
            var response : Cart.FetchProducts.Response
            switch(result){
            case .success(let products):
                self.products = products.sorted(by: { $0.name < $1.name})
                response = Cart.FetchProducts.Response(products: self.products, error: nil)
            case .failure(let error):
                response = Cart.FetchProducts.Response(products: nil, error: error)
            }
            self.presenter?.presentProducts(response: response)
        })
    }
    
    func removeFromCart(request: Cart.RemoveProduct.Request){
        worker.removeProduct(productId: request.id, completionHandler: { (result) in
            var response : Cart.RemoveProduct.Response
            switch(result){
            case .success(let success):
                response = Cart.RemoveProduct.Response(success: success, error: nil)
            case .failure(let error):
                response = Cart.RemoveProduct.Response(success: nil, error: error)
            }
            self.presenter?.removedProduct(response: response)
        })
    }
}
