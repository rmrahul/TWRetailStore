//
//  CartViewController.swift
//  RetailStore
//
//  Created by Rahul Mane on 21/07/18.
//  Copyright (c) 2018 developer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CartDisplayLogic: class{
    func displayProducts(viewModel: Cart.FetchProducts.ProductViewModel)
    func displayError(viewModel: Cart.FetchProducts.ErrorViewModel)
    func removedFromCart(viewModel: Cart.RemoveProduct.ProductViewModel)
    func displayError(viewModel: Cart.RemoveProduct.ErrorViewModel)
}

class CartViewController: UIViewController, CartDisplayLogic,UITableViewDataSource,UITableViewDelegate,CartProductTableViewCellDelegate{
    private var displayedProducts: [Cart.ViewModel.DisplayedProduct] = []
    
    var interactor: CartBusinessLogic?
    var router: (CartRoutingLogic & CartDataPassing)?
    
    @IBOutlet weak var lblTotal: UILabel!
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup(){
        let viewController = self
        let interactor = CartInteractor()
        let presenter = CartPresenter()
        let router = CartRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad(){
        super.viewDidLoad()
        applyUI()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchCartProducts()
    }
    
    //MARK: Apply UI
    private func applyUI(){
        AppManager.appStyle.apply(textStyle: AppManager.TextStyle.navigationBar, to: (self.navigationController?.navigationBar)!)
    }
    
    // MARK: interactor communications
    func fetchCartProducts(){
        let request = Cart.FetchProducts.Request()
        interactor?.fetchProducts(request: request)
    }
    
    // MARK: Presenter commands
    func displayProducts(viewModel: Cart.FetchProducts.ProductViewModel) {
        displayedProducts = viewModel.displayedProducts
        lblTotal.text = viewModel.total
        tableView.reloadData()
    }
    
    func displayError(viewModel: Cart.FetchProducts.ErrorViewModel) {
        AppUtil.showError(title: viewModel.title, body: viewModel.message)
    }
    
    func removedFromCart(viewModel: Cart.RemoveProduct.ProductViewModel) {
        AppUtil.showSuccess(title: viewModel.title, body: viewModel.message)
        fetchCartProducts()
    }
    
    func displayError(viewModel: Cart.RemoveProduct.ErrorViewModel) {
        AppUtil.showError(title: viewModel.title, body: viewModel.message)
    }
    
    // MARK: UI - tableview
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int{
        return displayedProducts.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell{
        let productCell = tableView.dequeueReusableCell(withIdentifier: "cartCell", for: indexPath) as! CartProductTableViewCell
        productCell.delegate = self
        productCell.configureCell(viewModel: displayedProducts[indexPath.row])
        return productCell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        router?.routeToShowProduct(indexPath: indexPath)
    }
    
    func didSelectRemoveFromCart(viewModel : Cart.ViewModel.DisplayedProduct?){
        guard let id = viewModel?.id else {return}
        let request = Cart.RemoveProduct.Request(id: id)
        interactor?.removeFromCart(request: request)
    }
}
