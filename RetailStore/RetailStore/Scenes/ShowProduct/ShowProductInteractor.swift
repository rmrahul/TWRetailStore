//
//  ShowProductInteractor.swift
//  RetailStore
//
//  Created by Rahul Mane on 21/07/18.
//  Copyright (c) 2018 developer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowProductBusinessLogic{
    func fetchProduct(request : ShowProduct.Fetch.Request)
    func addToCart(request : ShowProduct.AddToCart.Request)
}

protocol ShowProductDataStore{
    var product: Product? { get set}
    var usedBy : ShowProduct.ShowProductUsedBy? {get set}
}

class ShowProductInteractor: ShowProductBusinessLogic, ShowProductDataStore{
    var worker: ShowProductWorker = ShowProductWorker(cartStore: CartCoreDataStore())
    var presenter: ShowProductPresentationLogic?
    var product: Product?
    var usedBy : ShowProduct.ShowProductUsedBy?
    
    // MARK: ShowProductDataStore implementation
    func fetchProduct(request : ShowProduct.Fetch.Request){
        let response = ShowProduct.Fetch.Response(product: product, usedBy: usedBy ?? .productList)
        presenter?.presentProduct(response: response)
    }
    
    func addToCart(request : ShowProduct.AddToCart.Request){
        guard let product = product else{
            return
        }

        worker.addToCart(product: product, completionHandler: { (result) in
            var response : ShowProduct.AddToCart.Response
            switch(result){
            case .success( _):
                response = ShowProduct.AddToCart.Response(product: product,error:nil)
            case .failure(let error):
                response = ShowProduct.AddToCart.Response(product: nil, error: error)
            }
            self.presenter?.savedProduct(response: response)
        })
    }
}
