//
//  ShowProductPresenter.swift
//  RetailStore
//
//  Created by Rahul Mane on 21/07/18.
//  Copyright (c) 2018 developer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import UIKit

protocol ShowProductPresentationLogic{
    func presentProduct(response: ShowProduct.Fetch.Response)
    func savedProduct(response: ShowProduct.AddToCart.Response)
}

class ShowProductPresenter: ShowProductPresentationLogic{
    weak var viewController: ShowProductDisplayLogic?
    private struct Titles{
        static let price = "Price : "
        static let errorTitle = "Show Product"
        static let successTitle = "Show Product"
        static let cantFetch = "The product cannot be fetched at this moment. Please try again!!!"
        static let cantAddToCart = "The product cannot be added to cart at this moment. Please try again!!!"
        static let addedToCart = "The product has been added to cart."
    }
    
    // MARK: ShowProductPresentationLogic implementation
    func presentProduct(response: ShowProduct.Fetch.Response){
        if let product = response.product{
            let rows = getRows(basedOnUse: response.usedBy, for: product)
            let viewModel = ShowProduct
                .Fetch
                .DisplayedProductViewModel(id: product.id, tableRepresentation:rows)
            viewController?.displayProduct(viewModel: viewModel)
        }
        else{
            let errorModel = ShowProduct.Fetch.ErrorViewModel(title: Titles.errorTitle, message: Titles.cantFetch)
            viewController?.displayError(viewModel: errorModel)
        }
    }
    
    func savedProduct(response: ShowProduct.AddToCart.Response){
        if let _ = response.product{
            let successModel = ShowProduct.AddToCart.DisplayedProductViewModel(title: Titles.successTitle, message: Titles.addedToCart)
            viewController?.displaySuccessOfAddCart(viewModel:successModel)
        }
        else{
            let errorModel = ShowProduct.AddToCart.ErrorViewModel(title:Titles.errorTitle, message: Titles.cantAddToCart)
            viewController?.displayError(viewModel: errorModel)
        }
    }
    
    private func getRows(basedOnUse usedBy : ShowProduct.ShowProductUsedBy, for product: Product) -> [ShowProduct.Fetch.DisplayedProductViewModel.ProductTableRows]{
        let name = AppUtil.getAttributedString(from: product.name, subTitle:"")
        let price = AppUtil.getAttributedString(from: Titles.price, subTitle: "\(product.price)")
        var rows = [ShowProduct.Fetch.DisplayedProductViewModel.ProductTableRows.icon(product.images.first ?? ""),
                    ShowProduct.Fetch.DisplayedProductViewModel.ProductTableRows.name(name),
                    ShowProduct.Fetch.DisplayedProductViewModel.ProductTableRows.price(price)
        ]
        
        switch usedBy {
        case .productList:
            rows.append(ShowProduct.Fetch.DisplayedProductViewModel.ProductTableRows.addToCart)
        case .cart:break
        }
        return rows
    }
}
