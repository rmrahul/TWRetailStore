//
//  ListProductsPresenter.swift
//  RetailStore
//
//  Created by Rahul Mane on 21/07/18.
//  Copyright (c) 2018 developer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListProductsPresentationLogic{
    func presentProducts(response: ListProducts.Fetch.Response)
}

class ListProductsPresenter: ListProductsPresentationLogic{
    weak var viewController: ListProductsDisplayLogic?
    private struct Titles{
        static let name = "Name : "
        static let price = "Price : "
        static let errorTitle = "Product List"
        static let cantFetch = "The product cannot be fetched at this moment. Please try again!!!"
        static let unknown = "Oops something went wrong!!!"
    }
    
    // MARK: ListProductsPresentationLogic implementation
    func presentProducts(response: ListProducts.Fetch.Response){
        if let products = response.products{
            let viewModel = getProductModel(products:products)
            viewController?.displayProducts(viewModel: viewModel)
        }
        else{
            let viewModel = getErrorModel(response: response)
            viewController?.displayError(viewModel: viewModel)
        }
    }
    
    private func getProductModel(products : [String : [Product]]) -> ListProducts.Fetch.ProductViewModel{
        var productsPerCategory : [String : [ListProducts.Fetch.ProductViewModel.DisplayedProduct]] = [:]
        for (key,value) in products{
            var displayedProducts : [ListProducts.Fetch.ProductViewModel.DisplayedProduct] = []
            
            for p in value{
                let name = AppUtil.getAttributedString(from: Titles.name, subTitle: p.name)
                let price = AppUtil.getAttributedString(from: Titles.price, subTitle: "\(p.price)")
                
                let displayedProduct = ListProducts
                    .Fetch
                    .ProductViewModel
                    .DisplayedProduct(id: p.id, name:name, price: price, images: p.images)
                displayedProducts.append(displayedProduct)
            }
            productsPerCategory.updateValue(displayedProducts, forKey: key)
        }
        return  ListProducts.Fetch.ProductViewModel(displayedProducts: productsPerCategory)
    }
    
    private func getErrorModel(response : ListProducts.Fetch.Response) -> ListProducts.Fetch.ErrorViewModel{
        let title = Titles.errorTitle
        var message = Titles.unknown
        
        guard let error = response.error else{
            return ListProducts.Fetch.ErrorViewModel(title: title, message: message)
        }
        
        switch(error){
        case .CannotFetch(_):
            message = Titles.cantFetch
        default:
            message = Titles.unknown
        }
        
        return ListProducts.Fetch.ErrorViewModel(title: title, message: message)
    }
}
