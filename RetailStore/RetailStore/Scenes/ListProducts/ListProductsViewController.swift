//
//  ListProductsViewController.swift
//  RetailStore
//
//  Created by Rahul Mane on 21/07/18.
//  Copyright (c) 2018 developer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListProductsDisplayLogic: class{
    func displayProducts(viewModel: ListProducts.Fetch.ProductViewModel)
    func displayError(viewModel: ListProducts.Fetch.ErrorViewModel)
}

class ListProductsViewController: UIViewController, ListProductsDisplayLogic,UITableViewDataSource,UITableViewDelegate{
    private var interactor: ListProductsBusinessLogic?
    private var router: (ListProductsRoutingLogic & ListProductsDataPassing)?
    private var displayedProducts: [String : [ListProducts.Fetch.ProductViewModel.DisplayedProduct]] = [:]
    
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup(){
        let viewController = self
        let interactor = ListProductsInteractor()
        let presenter = ListProductsPresenter()
        let router = ListProductsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        //passdata
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad(){
        super.viewDidLoad()
        applyUI()
        fetchProducts()
    }
    
    //MARK: Apply UI
    private func applyUI(){
        AppManager.appStyle.apply(textStyle: AppManager.TextStyle.navigationBar, to: (self.navigationController?.navigationBar)!)
        AppManager.appStyle.apply(textStyle: AppManager.TextStyle.tabbar, to: (self.tabBarController?.tabBar)!)
    }
    
    // MARK: Interactor communication
    func fetchProducts(){
        let request = ListProducts.Fetch.Request()
        interactor?.fetchProducts(request: request)
    }
    
    // MARK: Presenter commands
    func displayProducts(viewModel: ListProducts.Fetch.ProductViewModel) {
        displayedProducts = viewModel.displayedProducts
        tableView.reloadData()
    }
    
    func displayError(viewModel: ListProducts.Fetch.ErrorViewModel) {
        AppUtil.showError(title: viewModel.title, body: viewModel.message)
    }
    
    // MARK: UI - tableview
    func numberOfSections(in tableView: UITableView) -> Int {
        return displayedProducts.keys.count
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int{
        let products = displayedProducts[Array(displayedProducts.keys)[section]]
        return products?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell{
        let productCell = tableView.dequeueReusableCell(withIdentifier: "productCell", for: indexPath) as! ProductTableViewCell
        let products = displayedProducts[Array(displayedProducts.keys)[indexPath.section]]
        productCell.configureCell(viewModel: products![indexPath.row])
        return productCell
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return Array(displayedProducts.keys)[section]
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        router?.routeToShowProduct(indexPath: indexPath)
    }
}
